// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: aot.proto

package aot

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExchangeId int32

const (
	ExchangeId_BINANCE             ExchangeId = 0
	ExchangeId_BYBIT               ExchangeId = 1
	ExchangeId_MEXC                ExchangeId = 2
	ExchangeId_EXCHANGE_ID_INVALID ExchangeId = 3
)

// Enum value maps for ExchangeId.
var (
	ExchangeId_name = map[int32]string{
		0: "BINANCE",
		1: "BYBIT",
		2: "MEXC",
		3: "EXCHANGE_ID_INVALID",
	}
	ExchangeId_value = map[string]int32{
		"BINANCE":             0,
		"BYBIT":               1,
		"MEXC":                2,
		"EXCHANGE_ID_INVALID": 3,
	}
)

func (x ExchangeId) Enum() *ExchangeId {
	p := new(ExchangeId)
	*p = x
	return p
}

func (x ExchangeId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeId) Descriptor() protoreflect.EnumDescriptor {
	return file_aot_proto_enumTypes[0].Descriptor()
}

func (ExchangeId) Type() protoreflect.EnumType {
	return &file_aot_proto_enumTypes[0]
}

func (x ExchangeId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeId.Descriptor instead.
func (ExchangeId) EnumDescriptor() ([]byte, []int) {
	return file_aot_proto_rawDescGZIP(), []int{0}
}

type TransactionAction int32

const (
	TransactionAction_BUY  TransactionAction = 0
	TransactionAction_SELL TransactionAction = 1
)

// Enum value maps for TransactionAction.
var (
	TransactionAction_name = map[int32]string{
		0: "BUY",
		1: "SELL",
	}
	TransactionAction_value = map[string]int32{
		"BUY":  0,
		"SELL": 1,
	}
)

func (x TransactionAction) Enum() *TransactionAction {
	p := new(TransactionAction)
	*p = x
	return p
}

func (x TransactionAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionAction) Descriptor() protoreflect.EnumDescriptor {
	return file_aot_proto_enumTypes[1].Descriptor()
}

func (TransactionAction) Type() protoreflect.EnumType {
	return &file_aot_proto_enumTypes[1]
}

func (x TransactionAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionAction.Descriptor instead.
func (TransactionAction) EnumDescriptor() ([]byte, []int) {
	return file_aot_proto_rawDescGZIP(), []int{1}
}

type MarketType int32

const (
	MarketType_SPOT                MarketType = 0
	MarketType_FUTURES             MarketType = 1
	MarketType_OPTIONS             MarketType = 2
	MarketType_MARKET_TYPE_INVALID MarketType = 3
)

// Enum value maps for MarketType.
var (
	MarketType_name = map[int32]string{
		0: "SPOT",
		1: "FUTURES",
		2: "OPTIONS",
		3: "MARKET_TYPE_INVALID",
	}
	MarketType_value = map[string]int32{
		"SPOT":                0,
		"FUTURES":             1,
		"OPTIONS":             2,
		"MARKET_TYPE_INVALID": 3,
	}
)

func (x MarketType) Enum() *MarketType {
	p := new(MarketType)
	*p = x
	return p
}

func (x MarketType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketType) Descriptor() protoreflect.EnumDescriptor {
	return file_aot_proto_enumTypes[2].Descriptor()
}

func (MarketType) Type() protoreflect.EnumType {
	return &file_aot_proto_enumTypes[2]
}

func (x MarketType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketType.Descriptor instead.
func (MarketType) EnumDescriptor() ([]byte, []int) {
	return file_aot_proto_rawDescGZIP(), []int{2}
}

// Example message
type Wallet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exchange      string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Ticker        string                 `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Balance       float64                `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Wallet) Reset() {
	*x = Wallet{}
	mi := &file_aot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Wallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wallet) ProtoMessage() {}

func (x *Wallet) ProtoReflect() protoreflect.Message {
	mi := &file_aot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wallet.ProtoReflect.Descriptor instead.
func (*Wallet) Descriptor() ([]byte, []int) {
	return file_aot_proto_rawDescGZIP(), []int{0}
}

func (x *Wallet) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Wallet) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Wallet) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

type Pnl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exchange      string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	TradingPair   string                 `protobuf:"bytes,2,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	Realized      float64                `protobuf:"fixed64,3,opt,name=realized,proto3" json:"realized,omitempty"`
	Unrealized    float64                `protobuf:"fixed64,4,opt,name=unrealized,proto3" json:"unrealized,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pnl) Reset() {
	*x = Pnl{}
	mi := &file_aot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pnl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pnl) ProtoMessage() {}

func (x *Pnl) ProtoReflect() protoreflect.Message {
	mi := &file_aot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pnl.ProtoReflect.Descriptor instead.
func (*Pnl) Descriptor() ([]byte, []int) {
	return file_aot_proto_rawDescGZIP(), []int{1}
}

func (x *Pnl) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Pnl) GetTradingPair() string {
	if x != nil {
		return x.TradingPair
	}
	return ""
}

func (x *Pnl) GetRealized() float64 {
	if x != nil {
		return x.Realized
	}
	return 0
}

func (x *Pnl) GetUnrealized() float64 {
	if x != nil {
		return x.Unrealized
	}
	return 0
}

type OrderBook struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exchange      string                 `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	MarketType    string                 `protobuf:"bytes,2,opt,name=market_type,json=marketType,proto3" json:"market_type,omitempty"`
	TradingPair   string                 `protobuf:"bytes,3,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	BestBid       float64                `protobuf:"fixed64,4,opt,name=best_bid,json=bestBid,proto3" json:"best_bid,omitempty"`
	BestAsk       float64                `protobuf:"fixed64,5,opt,name=best_ask,json=bestAsk,proto3" json:"best_ask,omitempty"`
	Spread        float64                `protobuf:"fixed64,6,opt,name=spread,proto3" json:"spread,omitempty"`
	BestBidQty    float64                `protobuf:"fixed64,7,opt,name=best_bid_qty,json=bestBidQty,proto3" json:"best_bid_qty,omitempty"`
	BestAskQty    float64                `protobuf:"fixed64,8,opt,name=best_ask_qty,json=bestAskQty,proto3" json:"best_ask_qty,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBook) Reset() {
	*x = OrderBook{}
	mi := &file_aot_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook) ProtoMessage() {}

func (x *OrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_aot_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBook.ProtoReflect.Descriptor instead.
func (*OrderBook) Descriptor() ([]byte, []int) {
	return file_aot_proto_rawDescGZIP(), []int{2}
}

func (x *OrderBook) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OrderBook) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

func (x *OrderBook) GetTradingPair() string {
	if x != nil {
		return x.TradingPair
	}
	return ""
}

func (x *OrderBook) GetBestBid() float64 {
	if x != nil {
		return x.BestBid
	}
	return 0
}

func (x *OrderBook) GetBestAsk() float64 {
	if x != nil {
		return x.BestAsk
	}
	return 0
}

func (x *OrderBook) GetSpread() float64 {
	if x != nil {
		return x.Spread
	}
	return 0
}

func (x *OrderBook) GetBestBidQty() float64 {
	if x != nil {
		return x.BestBidQty
	}
	return 0
}

func (x *OrderBook) GetBestAskQty() float64 {
	if x != nil {
		return x.BestAskQty
	}
	return 0
}

type Transaction struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TradingPair       string                 `protobuf:"bytes,1,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	ExchangeId        ExchangeId             `protobuf:"varint,2,opt,name=exchange_id,json=exchangeId,proto3,enum=aot.proto.ExchangeId" json:"exchange_id,omitempty"`
	MarketType        MarketType             `protobuf:"varint,3,opt,name=market_type,json=marketType,proto3,enum=aot.proto.MarketType" json:"market_type,omitempty"`
	TransactionAction TransactionAction      `protobuf:"varint,4,opt,name=transaction_action,json=transactionAction,proto3,enum=aot.proto.TransactionAction" json:"transaction_action,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_aot_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_aot_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_aot_proto_rawDescGZIP(), []int{3}
}

func (x *Transaction) GetTradingPair() string {
	if x != nil {
		return x.TradingPair
	}
	return ""
}

func (x *Transaction) GetExchangeId() ExchangeId {
	if x != nil {
		return x.ExchangeId
	}
	return ExchangeId_BINANCE
}

func (x *Transaction) GetMarketType() MarketType {
	if x != nil {
		return x.MarketType
	}
	return MarketType_SPOT
}

func (x *Transaction) GetTransactionAction() TransactionAction {
	if x != nil {
		return x.TransactionAction
	}
	return TransactionAction_BUY
}

type Trade struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Transactions  []*Transaction         `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trade) Reset() {
	*x = Trade{}
	mi := &file_aot_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_aot_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_aot_proto_rawDescGZIP(), []int{4}
}

func (x *Trade) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Trade) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type Trades struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trades        map[uint64]*Trade      `protobuf:"bytes,1,rep,name=trades,proto3" json:"trades,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trades) Reset() {
	*x = Trades{}
	mi := &file_aot_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trades) ProtoMessage() {}

func (x *Trades) ProtoReflect() protoreflect.Message {
	mi := &file_aot_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trades.ProtoReflect.Descriptor instead.
func (*Trades) Descriptor() ([]byte, []int) {
	return file_aot_proto_rawDescGZIP(), []int{5}
}

func (x *Trades) GetTrades() map[uint64]*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

var File_aot_proto protoreflect.FileDescriptor

var file_aot_proto_rawDesc = string([]byte{
	0x0a, 0x09, 0x61, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x61, 0x6f, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x80,
	0x01, 0x0a, 0x03, 0x50, 0x6e, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61,
	0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x22, 0xfd, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x65,
	0x73, 0x74, 0x41, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x51, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x41, 0x73, 0x6b, 0x51, 0x74,
	0x79, 0x22, 0xed, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x36, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x6f, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64,
	0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x61, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x61, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x53, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x1a, 0x4b, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x6f, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x47, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x49, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x42, 0x49, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x45, 0x58, 0x43, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x2a, 0x26,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x2a, 0x49, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x50, 0x4f, 0x54, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x03, 0x42, 0x06, 0x5a, 0x04, 0x2f, 0x61, 0x6f, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_aot_proto_rawDescOnce sync.Once
	file_aot_proto_rawDescData []byte
)

func file_aot_proto_rawDescGZIP() []byte {
	file_aot_proto_rawDescOnce.Do(func() {
		file_aot_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_aot_proto_rawDesc), len(file_aot_proto_rawDesc)))
	})
	return file_aot_proto_rawDescData
}

var file_aot_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_aot_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_aot_proto_goTypes = []any{
	(ExchangeId)(0),        // 0: aot.proto.ExchangeId
	(TransactionAction)(0), // 1: aot.proto.TransactionAction
	(MarketType)(0),        // 2: aot.proto.MarketType
	(*Wallet)(nil),         // 3: aot.proto.Wallet
	(*Pnl)(nil),            // 4: aot.proto.Pnl
	(*OrderBook)(nil),      // 5: aot.proto.OrderBook
	(*Transaction)(nil),    // 6: aot.proto.Transaction
	(*Trade)(nil),          // 7: aot.proto.Trade
	(*Trades)(nil),         // 8: aot.proto.Trades
	nil,                    // 9: aot.proto.Trades.TradesEntry
}
var file_aot_proto_depIdxs = []int32{
	0, // 0: aot.proto.Transaction.exchange_id:type_name -> aot.proto.ExchangeId
	2, // 1: aot.proto.Transaction.market_type:type_name -> aot.proto.MarketType
	1, // 2: aot.proto.Transaction.transaction_action:type_name -> aot.proto.TransactionAction
	6, // 3: aot.proto.Trade.transactions:type_name -> aot.proto.Transaction
	9, // 4: aot.proto.Trades.trades:type_name -> aot.proto.Trades.TradesEntry
	7, // 5: aot.proto.Trades.TradesEntry.value:type_name -> aot.proto.Trade
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_aot_proto_init() }
func file_aot_proto_init() {
	if File_aot_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_aot_proto_rawDesc), len(file_aot_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aot_proto_goTypes,
		DependencyIndexes: file_aot_proto_depIdxs,
		EnumInfos:         file_aot_proto_enumTypes,
		MessageInfos:      file_aot_proto_msgTypes,
	}.Build()
	File_aot_proto = out.File
	file_aot_proto_goTypes = nil
	file_aot_proto_depIdxs = nil
}
